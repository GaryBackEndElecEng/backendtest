generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_AWS")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Blog {
  id         Int         @id @default(autoincrement())
  name       String
  title      String?
  desc       String
  img        String?
  attr       String
  eleId      String?
  class      String?
  inner_html String?
  cssText    String?
  imgKey     String?
  imgBgKey   String?
  user_id    String
  date       DateTime
  show       Boolean
  username   String?
  rating     Int
  User       User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Chart      Chart[]
  Code       Code[]
  Element    Element[]
  Message    Message[]
  PageCount  PageCount[]
  Selector   Selector[]
}

model Chart {
  id          Int    @id @default(autoincrement())
  type        String
  chartOption String
  eleId       String
  placement   Int
  blog_id     Int
  Blog        Blog   @relation(fields: [blog_id], references: [id], onDelete: Cascade)
}

model Code {
  id         Int        @id @default(autoincrement())
  placement  Int?
  name       String
  img        String
  type       String
  eleId      String
  class      String
  inner_html String
  cssText    String
  blog_id    Int
  template   String
  Blog       Blog       @relation(fields: [blog_id], references: [id], onDelete: Cascade)
  Linecode   Linecode[]
}

model Col {
  id          Int           @id @default(autoincrement())
  name        String
  eleId       String
  class       String
  inner_html  String?
  imgKey      String?
  cssText     String
  row_id      Int
  order       Int
  Row         Row           @relation(fields: [row_id], references: [id], onDelete: Cascade)
  Element_sel Element_sel[]
}

model ColAttr {
  id          Int      @id @default(autoincrement())
  T           Int
  B           Int
  selector_id Int
  Selector    Selector @relation(fields: [selector_id], references: [id], onDelete: Cascade)
}

model DeletedImg {
  id     Int      @id @default(autoincrement())
  count  Int?
  imgKey String   @unique
  del    Boolean
  date   DateTime @default(now())

  @@unique([imgKey, id])
}

model Element {
  id         Int     @id @default(autoincrement())
  placement  Int
  name       String
  eleId      String
  class      String
  inner_html String
  cssText    String
  attr       String?
  img        String?
  imgKey     String?
  blog_id    Int
  Blog       Blog    @relation(fields: [blog_id], references: [id], onDelete: Cascade)
}

model Element_sel {
  id         Int     @id @default(autoincrement())
  placement  Int?
  name       String
  eleId      String
  class      String
  inner_html String
  cssText    String
  attr       String?
  selectorId Int?
  img        String?
  imgKey     String?
  col_id     Int
  order      Int
  Col        Col     @relation(fields: [col_id], references: [id], onDelete: Cascade)
}

model Linecode {
  id      Int    @id @default(autoincrement())
  text    String
  code_id Int
  Code    Code   @relation(fields: [code_id], references: [id], onDelete: Cascade)
}

model Message {
  id      Int      @id @default(autoincrement())
  rate    Int
  name    String
  email   String
  msg     String
  user_id String?
  blog_id Int?
  date    DateTime @default(now())
  secret  Boolean
  sent    Boolean
  Blog    Blog?    @relation(fields: [blog_id], references: [id], onDelete: Cascade)
}

model PageCount {
  id      Int    @id @default(autoincrement())
  name    String @unique
  count   Int    @default(autoincrement())
  blog_id Int?
  Blog    Blog?  @relation(fields: [blog_id], references: [id], onDelete: Cascade)

  @@unique([name, id])
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean  @default(false)
  date      DateTime @default(now())
  userId    String
  imageKey  String?
  link      String?
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Row {
  id          Int      @id @default(autoincrement())
  name        String
  eleId       String
  class       String
  inner_html  String?
  imgKey      String?
  cssText     String
  selector_id Int
  order       Int
  Col         Col[]
  Selector    Selector @relation(fields: [selector_id], references: [id], onDelete: Cascade)
}

model Selector {
  id         Int       @id @default(autoincrement())
  placement  Int
  name       String
  eleId      String
  class      String
  inner_html String?
  cssText    String
  rowNum     Int
  colNum     Int
  blog_id    Int
  header     Boolean
  footer     Boolean
  headerType String?
  ColAttr    ColAttr[]
  Row        Row[]
  Blog       Blog      @relation(fields: [blog_id], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String   @unique
  expires      DateTime
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @unique
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  admin         Boolean   @default(false)
  bio           String?
  imgKey        String?
  showinfo      Boolean?
  username      String?
  Account       Account[]
  Blog          Blog[]
  Post          Post[]
  Session       Session?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
